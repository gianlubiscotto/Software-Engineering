        -:    0:Source:DAG-cover.tpp
        -:    0:Graph:DAG-main-test.gcno
        -:    0:Data:DAG-main-test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <iostream> //for debugging
        -:    2:#include <algorithm> //for sorting
        -:    3:#include "functions.h"
        -:    4:#include "DAG.h"
        -:    5:
        -:    6:template <typename R> 
function _ZNK3DAGIiE5coverERK2BRIiEj called 2 returned 100% blocks executed 86%
        2:    7:bool DAG<R>::cover(const BR<R> &B, N i) const
        -:    8:{
        2:    9:    if (i==0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   10:		cout<<"cover1"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:   11:		return false;
        -:   12:	}
        1:   13:	cout<<"cover2"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:   14:    ListN C;//accumulator of non-empty nodes at level l that must cover B
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        1:   15:    C.push_back(i);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   16:    return 1;
        -:   17:}
        -:   18:
        -:   19:template <typename R> 
function _ZNK3DAGIiE5coverERK2BRIiERSt6vectorIjSaIjEEj called 3 returned 100% blocks executed 93%
        3:   20:bool DAG<R>::cover(const BR<R> &B,ListN& C, N l) const
        -:   21:{
        3:   22:    N n=C.size();//n>0
call    0 returned 100%
        3:   23:    if (n==0){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   24:		cout<<"cover1"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:   25:		return false;
        -:   26:	}
        2:   27:	cout<<"cover2"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:   28:    if (l==0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   29:    {
        1:   30:		cout<<"cover3"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:   31:        bool b=true;
        2:   32:        for(N i=0; b&&i<n; i++)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        1:   33:            b=1;
        1:   34:        return b;
        -:   35:    }
        1:   36:	cout<<"cover4"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:   37:    //l>0
        2:   38:    ListN C_;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        1:   39:    bool b=true;
        2:   40:    for(N i=0; b&&i<n; i++)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   41:        //b=cover(B.x[l].l,B.x[l].u,nodes[l-1][C[i]-1],C_);
        1:   42:		b=0;
        1:   43:	C_.push_back(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   44:	C_.push_back(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   45:    N m=C_.size();
call    0 returned 100%
        1:   46:    if (m==0||!b){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   47:		cout<<"cover5"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:   48:		//return false;
        -:   49:	}
        -:   50:    //check cover at l-
        1:   51:	cout<<"cover6"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:   52:    C.resize(0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   53:    sort(C_.begin(),C_.end());//sort C_
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        1:   54:    N r=C_[0];
call    0 returned 100%
        1:   55:    C.push_back(r);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   56:    for(N i=1; i<m; i++){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   57:		cout<<"cover7"<<endl;        
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:   58:		if (C_[i]!=r)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   59:        {
        1:   60:			cout<<"cover8"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:   61:            r=C_[i];
call    0 returned 100%
        1:   62:            C.push_back(r);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   63:        }
        1:   64:		cout<<"cover9"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:   65:	}
        1:   66:	cout<<"cover10"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:   67:    return true;
        -:   68:}
        -:   69:
        -:   70:template <typename R> 
function _ZNK3DAGIiE5coverEiiRK4NodeIiERSt6vectorIjSaIjEE called 6 returned 100% blocks executed 98%
        6:   71:bool DAG<R>::cover(R min, R max, const Node<R> & X, ListN&C) const
        -:   72:{
        6:   73:    N n = X.x.size();
call    0 returned 100%
        6:   74:    if ((min<X.x[0])||(X.x[n-1]<max)){
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 17% (fallthrough)
branch  7 taken 83%
        1:   75:		cout<<"cover1"<<endl;		
call    0 returned 100%
call    1 returned 100%
        1:   76:		return false;
        -:   77:	} 
        5:   78:	cout<<"cover2"<<endl;
call    0 returned 100%
call    1 returned 100%
        -:   79:    //X.x.[0]<=min<=max<=X.x[n-1]
        -:   80:    N i, j;
        5:   81:    for (i=0; X.x[i]<min; i++);
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        5:   82:    for (j=n-1; max<X.x[j]; j--);
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:   83:    //min<=X.x[i] && X.x[j]<=max
        5:   84:    if (min<X.x[i]) //thus 0<i
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
        -:   85:    {
        2:   86:		cout<<"cover3"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:   87:        N u=X.u[i-1];
call    0 returned 100%
        2:   88:        if (u>0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   89:			cout<<"cover4"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:   90:			C.push_back(u);			
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   91:		}
        -:   92:        else{
        1:   93:			cout<<"cover5"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:   94:			return false;
        -:   95:		} 
        -:   96:    }
        4:   97:	cout<<"cover6"<<endl;
call    0 returned 100%
call    1 returned 100%
        4:   98:    if (X.x[j]<max) //thus j<n-1
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:   99:    {	
        2:  100:		cout<<"cover7"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:  101:        N u=X.u[j];
call    0 returned 100%
        2:  102:        if (u>0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  103:			cout<<"cover8"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  104:			C.push_back(u);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  105:		} 
        -:  106:        else{
        1:  107:			cout<<"cover9"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  108:			return false;	
        -:  109:		} 
        -:  110:    }
        3:  111:	cout<<"cover10"<<endl;
call    0 returned 100%
call    1 returned 100%
        4:  112:    for (N k=i; k<j; k++)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  113:    {
        2:  114:		cout<<"cover11"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:  115:        N u=X.u[k];
call    0 returned 100%
        2:  116:        if (u>0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  117:			cout<<"cover12"<<endl;	
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  118:			C.push_back(u);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  119:		} 
        -:  120:        else{
        1:  121:			cout<<"cover13"<<endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  122:			return false;			
        -:  123:		} 
        -:  124:    }
        2:  125:	cout<<"cover14"<<endl;
call    0 returned 100%
call    1 returned 100%
        4:  126:    for (N k=i; k<=j; k++){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  127:        cout<<"cover15"<<endl;
call    0 returned 100%
call    1 returned 100%
        2:  128:		C.push_back(X.ux[k]);
call    0 returned 100%
call    1 returned 100%
        -:  129:	} 
        2:  130:	cout<<"cover16"<<endl;   
call    0 returned 100%
call    1 returned 100%
        2:  131:	return true;
call    0 never executed
call    1 never executed
        -:  132:}
        -:  133:
