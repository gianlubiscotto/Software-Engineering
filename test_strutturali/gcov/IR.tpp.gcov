        -:    0:Source:IR.tpp
        -:    0:Graph:UIR-main-test.gcno
        -:    0:Data:UIR-main-test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "types.h"
        -:    2:#include "functions.h"
        -:    3:template <typename R> 
function _ZN2IRIiEC2Eii called 9 returned 100% blocks executed 100%
        9:    4:IR<R>::IR(R x1,R x2)
        -:    5:{
        9:    6:    l=Min(x1,x2);
call    0 returned 100%
        9:    7:    u=Max(x1,x2);
call    0 returned 100%
        9:    8:}
        -:    9:
        -:   10:template <typename R> 
function _ZeqIiEbRK2IRIT_ES4_ called 11 returned 100% blocks executed 100%
       11:   11:bool operator==(const IR<R> & X1, const IR<R> & X2)
        -:   12:{
       11:   13:    return (X1.l == X2.l && X1.u == X2.u);
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   14:}
        -:   15:template <typename R> 
function _ZleIiEbRK2IRIT_ES4_ called 3 returned 100% blocks executed 100%
        3:   16:bool operator<=(const IR<R> & X1, const IR<R> & X2)
        -:   17:{
        3:   18:    return (X2.l <= X1.l) && (X1.u <= X2.u);
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   19:}
        -:   20:template <typename R> 
        -:   21:void cmp_a(const IR<R> & X1, const IR<R> & X2, CMP & c)
        -:   22:{
        -:   23:    if (c == c_no)
        -:   24:        return;
        -:   25:    if (X1 == X2)
        -:   26:        c = c_and(c, c_eq);
        -:   27:    else if (X1 <= X2)
        -:   28:        c = c_and(c, c_lt);
        -:   29:    else if (X2 <= X1)
        -:   30:        c = c_and(c, c_gt);
        -:   31:    else
        -:   32:        c = c_no;
        -:   33:}
        -:   34:template <typename R> 
function _ZlsIiERSoS0_RK2IRIT_E called 10 returned 100% blocks executed 73%
       10:   35:ostream & operator<<(ostream & stream, const IR<R> & X)
        -:   36:{
       10:   37:    if (X.l < X.u)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:   38:        stream << "[" << X.l << "," << X.u << "]";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:   39:    else
    #####:   40:        stream << "[" << X.l << "]";
call    0 never executed
call    1 never executed
call    2 never executed
       10:   41:    return stream;
        -:   42:}
        -:   43:
